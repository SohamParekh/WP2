plugins {
  id "com.android.application"
}

android {
    compileSdkVersion 28
    buildToolsVersion "29.0.2"

    dependencies {
        implementation fileTree(dir: 'libs', include: ['*.jar'])
        implementation 'androidx.appcompat:appcompat:1.1.0'
        implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
        implementation 'androidx.legacy:legacy-support-v4:1.0.0'
        implementation 'androidx.cardview:cardview:1.0.0'
        implementation 'com.google.android.material:material:1.0.0'
        implementation 'com.android.support:support-v4:28.0.0'
        implementation "androidx.annotation:annotation:1.1.0"
        implementation "androidx.viewpager:viewpager:1.0.0"
        implementation "androidx.drawerlayout:drawerlayout:1.0.0"
        implementation project(":terminal-view")
        androidTestImplementation 'androidx.test.ext:junit:1.1.1'
        androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    }

    defaultConfig {
        applicationId "com.termux"
        minSdkVersion 24
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            ndkBuild {
                cFlags "-std=c11", "-Wall", "-Wextra", "-Werror", "-Os", "-fno-stack-protector", "-Wl,--gc-sections"
            }
        }

        ndk {
            abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
        }

        ndkVersion '21.0.6113669'

    }

    signingConfigs {
        debug {
            storeFile file('dev_keystore.jks')
            keyAlias 'alias'
            storePassword 'xrj45yWGLbsO7W0v'
            keyPassword 'xrj45yWGLbsO7W0v'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.debug
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        ndkBuild {
            path "src/main/cpp/Android.mk"
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    ndkVersion = '21.0.6113669'
}

dependencies {
    testImplementation 'junit:junit:4.13'
    testImplementation 'org.robolectric:robolectric:4.3.1'
}

task versionName {
  doLast {
    print android.defaultConfig.versionName
  }
}

//New Files

def downloadBootstrap(String arch, String expectedChecksum, int version) {
    def digest = java.security.MessageDigest.getInstance("SHA-256")

    def localUrl = "src/main/cpp/bootstrap-" + arch + ".zip"
    def file = new File(projectDir, localUrl)
    if (file.exists()) {
        def buffer = new byte[8192]
        def input = new FileInputStream(file)
        while (true) {
            def readBytes = input.read(buffer)
            if (readBytes < 0) break
            digest.update(buffer, 0, readBytes)
        }
        def checksum = new BigInteger(1, digest.digest()).toString(16)
        if (checksum == expectedChecksum) {
            return
        } else {
            logger.quiet("Deleting old local file with wrong hash: " + localUrl)
            file.delete()
        }
    }

    def remoteUrl = "https://wp2-scripts.s3.amazonaws.com/bootstrap-" + arch + ".zip"
    logger.quiet("Downloading " + remoteUrl + " ...")

    file.parentFile.mkdirs()
    def out = new BufferedOutputStream(new FileOutputStream(file))

    def connection = new URL(remoteUrl).openConnection()
    connection.setInstanceFollowRedirects(true)
    def digestStream = new java.security.DigestInputStream(connection.inputStream, digest)
    out << digestStream
    out.close()

    def checksum = new BigInteger(1, digest.digest()).toString(16)
    if (checksum != expectedChecksum) {
        file.delete()
        throw new GradleException("Wrong checksum for " + remoteUrl + ": expected: " + expectedChecksum + ", actual: " + checksum)
    }
}

//def downloadBootstrap(String arch, String expectedChecksum, int version) {
//    def digest = java.security.MessageDigest.getInstance("SHA-256")
//
//    def localUrl = "src/main/cpp/bootstrap-" + arch + ".zip"
//    def file = new File(projectDir, localUrl)
//    if (file.exists()) {
//        def buffer = new byte[8192]
//        def input = new FileInputStream(file)
//        while (true) {
//            def readBytes = input.read(buffer)
//            if (readBytes < 0) break
//            digest.update(buffer, 0, readBytes)
//        }
//        def checksum = new BigInteger(1, digest.digest()).toString(16)
//        if (checksum == expectedChecksum) {
//            return
//        } else {
//            logger.quiet("Deleting old local file with wrong hash: " + localUrl)
//            file.delete()
//        }
//    }
//
//    def remoteUrl = "https://bintray.com/termux/bootstrap/download_file?file_path=bootstrap-" + arch + "-v" + version + ".zip"
//    logger.quiet("Downloading " + remoteUrl + " ...")
//
//    file.parentFile.mkdirs()
//    def out = new BufferedOutputStream(new FileOutputStream(file))
//
//    def connection = new URL(remoteUrl).openConnection()
//    connection.setInstanceFollowRedirects(true)
//    def digestStream = new java.security.DigestInputStream(connection.inputStream, digest)
//    out << digestStream
//    out.close()
//
//    def checksum = new BigInteger(1, digest.digest()).toString(16)
//    if (checksum != expectedChecksum) {
//        file.delete()
//        throw new GradleException("Wrong checksum for " + remoteUrl + ": expected: " + expectedChecksum + ", actual: " + checksum)
//    }
//}

clean {
    doLast {
        def tree = fileTree(new File(projectDir, 'src/main/cpp'))
        tree.include 'bootstrap-*.zip'
        tree.each { it.delete() }
    }
}

//NEW Files

task downloadBootstraps(){
    doLast {
        def version = 20
        downloadBootstrap("aarch64", "880250daff368447ce250c0320d7f296373fbfa9b8a488ccc91cf456f7c18056", version)
        downloadBootstrap("arm",     "d1ebc2178c38111809e57c103976a77cdde35e70553223d07f60ce8fc278aeb2", version)
       // downloadBootstrap("i686",    "058504534030251eb9f22c0e163d1fcfe5ec8bbad90199e9d141dc7e2f646acd", version)
        downloadBootstrap("x86_64",  "13d135e9fb24a8f41c4f2f0175df15b61a95a186da32243f72c1fcf9782d5bda", version)
    }
}

afterEvaluate {
  android.applicationVariants.all { variant ->
    variant.javaCompileProvider.get().dependsOn(downloadBootstraps)
  }
}
